buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}
dependencies {
    def libsdir = new File('libs');
    if (!libsdir.exists()) {
        println "Creating libs directory"
        libsdir.mkdir()
    }
    compile 'com.android.support:support-v4:19.1.+'
    compile 'com.android.support:appcompat-v7:19.1.+'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile ('org.shredzone.flattr4j:flattr4j-core:2.10') {
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.json', module: 'json'
    }
    compile 'commons-io:commons-io:2.4'
    compile 'com.nineoldandroids:library:2.4.0'
    compile project(':submodules:dslv:library')

    compile 'com.jayway.android.robotium:robotium-solo:5.1'
    compile ("com.doomonafireball.betterpickers:library:1.5.2") {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'org.jsoup:jsoup:1.7.3'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        testApplicationId "de.test.antennapod"
        testInstrumentationRunner "instrumentationTest.de.test.antennapod.AntennaPodTestRunner"
    }

    signingConfigs {
        releaseConfig {
            if (project.hasProperty('releaseStoreFile')) {
                storeFile file(releaseStoreFile)
            } else {
                storeFile file('keystore')
            }
            if (project.hasProperty('releaseStorePassword')) {
                storePassword releaseStorePassword
            } else {
                storePassword "password"
            }
            if (project.hasProperty('releaseKeyAlias')) {
                keyAlias releaseKeyAlias
            } else {
                keyAlias "alias"
            }
            if (project.hasProperty('releaseKeyPassword')) {
                keyPassword releaseKeyPassword
            } else {
                keyPassword "password"
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            runProguard true
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.releaseConfig
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        abortOnError false
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
